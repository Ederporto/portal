# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-09-28 13:41
from __future__ import unicode_literals

from django.db import migrations


def backwards_data(apps, schema_editor):

    eeg_data_model = apps.get_model("experiments", "EEGData")
    emg_data_model = apps.get_model("experiments", "EMGData")
    additional_data_model = apps.get_model("experiments", "AdditionalData")
    goalkeeper_game_data_model = apps.get_model("experiments", "GoalkeeperGameData")
    generic_data_collection_data_model = apps.get_model("experiments", "GenericDataCollectionData")

    for eeg_data in eeg_data_model.objects.all():
        if not eeg_data.file and eeg_data.files.all().exists():
            eeg_data.file_id = eeg_data.files.all()[0]
            eeg_data.save()

    for emg_data in emg_data_model.objects.all():
        if not emg_data.file and emg_data.files.all().exists():
            emg_data.file_id = emg_data.files.all()[0]
            emg_data.save()

    for additional_data in additional_data_model.objects.all():
        if not additional_data.file and additional_data.files.all().exists():
            additional_data.file_id = additional_data.files.all()[0]
            additional_data.save()

    for goalkeeper_game_data in goalkeeper_game_data_model.objects.all():
        if not goalkeeper_game_data.file and goalkeeper_game_data.files.all().exists():
            goalkeeper_game_data.file_id = goalkeeper_game_data.files.all()[0]
            goalkeeper_game_data.save()

    for generic_data_collection_data in generic_data_collection_data_model.objects.all():
        if not generic_data_collection_data.file and generic_data_collection_data.files.all().exists():
            generic_data_collection_data.file_id = generic_data_collection_data.files.all()[0]
            generic_data_collection_data.save()


def load_data(apps, schema_editor):

    eeg_data_model = apps.get_model("experiments", "EEGData")
    emg_data_model = apps.get_model("experiments", "EMGData")
    additional_data_model = apps.get_model("experiments", "AdditionalData")
    goalkeeper_game_data_model = apps.get_model("experiments", "GoalkeeperGameData")
    generic_data_collection_data_model = apps.get_model("experiments", "GenericDataCollectionData")

    for eeg_data in eeg_data_model.objects.all():
        if eeg_data.file and eeg_data.file not in eeg_data.files.all():
            eeg_data.files.add(eeg_data.file)
            eeg_data.save()

    for emg_data in emg_data_model.objects.all():
        if emg_data.file and emg_data.file not in emg_data.files.all():
            emg_data.files.add(emg_data.file)
            emg_data.save()

    for additional_data in additional_data_model.objects.all():
        if additional_data.file and additional_data.file not in additional_data.files.all():
            additional_data.files.add(additional_data.file)
            additional_data.save()

    for goalkeeper_game_data in goalkeeper_game_data_model.objects.all():
        if goalkeeper_game_data.file and goalkeeper_game_data.file not in goalkeeper_game_data.files.all():
            goalkeeper_game_data.files.add(goalkeeper_game_data.file)
            goalkeeper_game_data.save()

    for generic_data_collection_data in generic_data_collection_data_model.objects.all():
        if generic_data_collection_data.file and \
                        generic_data_collection_data.file not in generic_data_collection_data.files.all():
            generic_data_collection_data.files.add(generic_data_collection_data.file)
            goalkeeper_game_data.save()


class Migration(migrations.Migration):

    dependencies = [
        ('experiments', '0060_files_many_to_many'),
    ]

    operations = [
        migrations.RunPython(load_data, backwards_data)
    ]
